Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

 

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
Example 2:

Input: s = "a"
Output: [["a"]]
 

Constraints:

1 <= s.length <= 16
s contains only lowercase English letters.

******************************************************************************************************************************

class Solution {
public:
    
    bool check(string nums){
        
        if(nums.size()<=1) return true;
        
        int start=0;
        int end=nums.size()-1;
        
        while(start<=end){
            
            if(nums[start]!=nums[end]) return false;
            
            start++;
            end--;
        }
        
        return true;
    }
    
    
      vector<vector<string>> ans;
    
         vector<string> temp;
    
    void helper(string nums,int idx){
        
        if(nums.size()==0){
        
             ans.push_back(temp);
            
              return;
        }
        
         for(int i=0;i<nums.size();i++){
             
              string s=nums.substr(0,i+1);
             
              string rem=nums.substr(i+1);
           
             if(check(s)){
                 
               temp.push_back(s);
             
               helper(rem,i+1);
             
               temp.pop_back();
                 
             }
             
         }
        
    }
    
    vector<vector<string>> partition(string nums) {
   
          helper(nums,0);
          
           return ans;
    }
};
