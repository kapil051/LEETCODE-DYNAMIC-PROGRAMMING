Given an integer array nums, find the subarray which has the largest sum and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
 

Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.


//**********************************************************************************************************************************************

          //RECURSION

// class Solution {
// public:    
//           int globalMax=0;
        
//       int helper(vector<int> &nums,int idx){
         
//          if(idx==nums.size()-1){
//              globalMax=nums[idx];
//              return nums[idx];
//          }
  
//          int current=max(nums[idx],nums[idx]+helper(nums,idx+1));
          
//           globalMax=max(globalMax,current);
          
//               return current;
//      }
    
//     int maxSubArray(vector<int>& nums) {
      
//            int idx=0;
        
//           helper(nums,idx);
      
//           return globalMax;
//     }
// };

  //DYNAMIC PROGRAMMING

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        
        vector<int> dp(nums.size(),-1);
        
          int globalMax=nums[0];
        
           dp[0]=nums[0];
        
        for(int i=1;i<nums.size();i++){
            
            dp[i]=max(nums[i],nums[i]+dp[i-1]);
            
             globalMax=max(globalMax,dp[i]); 
        }
        
        return globalMax;
    }
};
