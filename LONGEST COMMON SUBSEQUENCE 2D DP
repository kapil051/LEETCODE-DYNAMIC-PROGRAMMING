Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

 

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.
 

Constraints:

1 <= text1.length, text2.length <= 1000
text1 and text2 consist of only lowercase English characters.

***********************************RECURSION(MEMOIZATION)

class Solution {
public:
    
    int helper(string text1,string text2,int idx1,int idx2,vector<vector<int>> &dp){
        
        if(idx1==text1.size()&&idx2==text2.size()) return 0; 
        
        if(idx1==text1.size()) return 0;
        
        if(idx2==text2.size()) return 0;
        
        if(dp[idx1][idx2]!=-1) return dp[idx1][idx2];
        
            if(text1[idx1]==text2[idx2]) 
             {
           dp[idx1][idx2]=1+helper(text1,text2,idx1+1,idx2+1,dp);
                
             cout<<"idx1:"<<idx1<<" idx2:"<<idx2<<" :"<<dp[idx1][idx2]<<endl;
                
             return dp[idx1][idx2];
             }
        
            else{
             dp[idx1][idx2]=max(helper(text1,text2,idx1+1,idx2,dp),helper(text1,text2,idx1,idx2+1,dp));
                
                cout<<"idx1:"<<idx1<<" idx2:"<<idx2<<" :"<<dp[idx1][idx2]<<endl;
                
                  return dp[idx1][idx2];
              }
        
        
        
    }
    
    int longestCommonSubsequence(string text1, string text2){
        
         int n=text1.size();
         int m=text2.size();
        
        vector<vector<int>> dp(n,vector<int>(m,-1));
        
           return helper(text1,text2,0,0,dp);
    }
};


  //DRY RUN 

    //abcde
    //ace


 //   2 D ARRAY


//               0       1       2
        
//         0     3  
                 
//         1             2       1
                
//         2             2       1
        
//         3                     1
                
//         4                     1


***********************************DYNAMIC PROGRAMMING 


class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        
      int n=text1.size();
      int m=text2.size();
        
        //abcde
        //ace
        
        
//               0       1       2       3
        
//         0    3        1       1       0
                 
//         1    2        2       1       0
                
//         2    2        2       1       0
        
//         3    1        1       1       0
                
//         4    1        1       1       0
        
//         5    0        0       0       0        
        
        
        
        
       vector<vector<int>> dp(n+1,vector<int> (m+1,-1));
        
         for(int i=0;i<=m;i++) dp[n][i]=0;
        
         for(int i=0;i<=n;i++) dp[i][m]=0;
        
        for(int i=n-1;i>=0;i--){
            
            for(int j=m-1;j>=0;j--){
       
               if(text1[i]==text2[j]) dp[i][j]=1+dp[i+1][j+1];
                
                else dp[i][j]=max(dp[i+1][j],dp[i][j+1]);
                
            }
            
        }
        
       return dp[0][0];
    }
};
